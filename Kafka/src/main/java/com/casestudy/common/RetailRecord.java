package com.casestudy.common;



/**
 

* 
* Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RetailRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3848692329238651835L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RetailRecord\",\"fields\":[{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"string\"},{\"name\":\"unitPrice\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RetailRecord> ENCODER =
      new BinaryMessageEncoder<RetailRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RetailRecord> DECODER =
      new BinaryMessageDecoder<RetailRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RetailRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RetailRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RetailRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RetailRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RetailRecord from a ByteBuffer. */
  public static RetailRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.CharSequence quantity;
  @Deprecated public java.lang.CharSequence unitPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RetailRecord() {}

  /**
   * All-args constructor.
   * @param description The new value for description
   * @param quantity The new value for quantity
   * @param unitPrice The new value for unitPrice
   */
  public RetailRecord(java.lang.CharSequence description, java.lang.CharSequence quantity, java.lang.CharSequence unitPrice) {
    this.description = description;
    this.quantity = quantity;
    this.unitPrice = unitPrice;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return description;
    case 1: return quantity;
    case 2: return unitPrice;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: description = (java.lang.CharSequence)value$; break;
    case 1: quantity = (java.lang.CharSequence)value$; break;
    case 2: unitPrice = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.lang.CharSequence getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.CharSequence value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'unitPrice' field.
   * @return The value of the 'unitPrice' field.
   */
  public java.lang.CharSequence getUnitPrice() {
    return unitPrice;
  }

  /**
   * Sets the value of the 'unitPrice' field.
   * @param value the value to set.
   */
  public void setUnitPrice(java.lang.CharSequence value) {
    this.unitPrice = value;
  }

  /**
   * Creates a new RetailRecord RecordBuilder.
   * @return A new RetailRecord RecordBuilder
   */
  public static RetailRecord.Builder newBuilder() {
    return new RetailRecord.Builder();
  }

  /**
   * Creates a new RetailRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RetailRecord RecordBuilder
   */
  public static RetailRecord.Builder newBuilder(RetailRecord.Builder other) {
    return new RetailRecord.Builder(other);
  }

  /**
   * Creates a new RetailRecord RecordBuilder by copying an existing RetailRecord instance.
   * @param other The existing instance to copy.
   * @return A new RetailRecord RecordBuilder
   */
  public static RetailRecord.Builder newBuilder(RetailRecord other) {
    return new RetailRecord.Builder(other);
  }

  /**
   * RecordBuilder for RetailRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RetailRecord>
    implements org.apache.avro.data.RecordBuilder<RetailRecord> {

    private java.lang.CharSequence description;
    private java.lang.CharSequence quantity;
    private java.lang.CharSequence unitPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(RetailRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[2].schema(), other.unitPrice);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RetailRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(RetailRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unitPrice)) {
        this.unitPrice = data().deepCopy(fields()[2].schema(), other.unitPrice);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public RetailRecord.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.description = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public RetailRecord.Builder clearDescription() {
      description = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuantity() {
      return quantity;
    }

    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public RetailRecord.Builder setQuantity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public RetailRecord.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitPrice' field.
      * @return The value.
      */
    public java.lang.CharSequence getUnitPrice() {
      return unitPrice;
    }

    /**
      * Sets the value of the 'unitPrice' field.
      * @param value The value of 'unitPrice'.
      * @return This builder.
      */
    public RetailRecord.Builder setUnitPrice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.unitPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unitPrice' field has been set.
      * @return True if the 'unitPrice' field has been set, false otherwise.
      */
    public boolean hasUnitPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unitPrice' field.
      * @return This builder.
      */
    public RetailRecord.Builder clearUnitPrice() {
      unitPrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RetailRecord build() {
      try {
        RetailRecord record = new RetailRecord();
        record.description = fieldSetFlags()[0] ? this.description : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.unitPrice = fieldSetFlags()[2] ? this.unitPrice : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RetailRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<RetailRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RetailRecord>
    READER$ = (org.apache.avro.io.DatumReader<RetailRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
